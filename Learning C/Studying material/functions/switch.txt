C Operators

C divides the operators into the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Bitwise operators

Arithmetic Operators

Arithmetic operators are used to perform common mathematical operations.

Operator	Name	Description	
+	Addition	Adds together two values	x + y	
-	Subtraction	Subtracts one value from another	x - y	
*	Multiplication	Multiplies two values	x * y	
/	Division	Divides one value by another	x / y	
%	Modulus	Returns the division remainder	x % y	
++	Increment	Increases the value of a variable by 1	++x	
--	Decrement	Decreases the value of a variable by 1	--x

Assignment Operators

Assignment operators are used to assign values to variables.

In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:

The addition assignment operator (+=) adds a value to a variable:

A list of all assignment operators:

Operator Example	Same As	Try it
=	 x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3

Comparison Operators

Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.

The return value of a comparison is either 1 or 0, which means true (1) or false (0). These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter.

In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:

Example
int x = 5;
int y = 3;
printf("%d", x > y); // returns 1 (true) because 5 is greater than 3


A list of all comparison operators:

Operator	Name	Example	Description	Try it
==	Equal to	x == y	Returns 1 if the values are equal	
!=	Not equal	x != y	Returns 1 if the values are not equal	
>	Greater than	x > y	Returns 1 if the first value is greater than the second value	
<	Less than	x < y	Returns 1 if the first value is less than the second value	
>=	Greater than or equal to	x >= y	Returns 1 if the first value is greater than, or equal to, the second value	
<=	Less than or equal to	x <= y	Returns 1 if the first value is less than, or equal to, the second value.


Logical Operators


You can also test for true or false values with logical operators.

Logical operators are used to determine the logic between variables or values:

Operator	Name	Example	Description	Try it
&& 	Logical and	x < 5 &&  x < 10	Returns 1 if both statements are true	
|| 	Logical or	x < 5 || x < 4	Returns 1 if one of the statements is true	
!	Logical not	!(x < 5 && x < 10)	Reverse the result, returns 0 if the result is 1

---------------------------------------------------------------------------------------

Boolean Variables

In C, the bool type is not a built-in data type, like int or char.

It was introduced in C99, and you must import the following header file to use it:

#include <stdbool.h>


A boolean variable is declared with the bool keyword and can only take the values true or false.




-------------messy---------------------------------------------------------------------------------------------------


efore trying to print the boolean variables, you should know that boolean values are returned as integers:

1 (or any other number that is not 0) represents true
0 represents false
Therefore, you must use the %d format specifier to print a boolean value:

Example
// Create boolean variables
bool isProgrammingFun = true;
bool isFishTasty = false;

// Return boolean values
printf("%d", isProgrammingFun);   // Returns 1 (true)
printf("%d", isFishTasty);        // Returns 0 (false)
However, it is more common to return a boolean value by comparing values and variables.

Comparing Values and Variables
Comparing values are useful in programming, because it helps us to find answers and make decisions.

For example, you can use a comparison operator, such as the greater than (>) operator, to compare two values:

Example
printf("%d", 10 > 9);  // Returns 1 (true) because 10 is greater than 9
From the example above, you can see that the return value is a boolean value (1).

You can also compare two variables:

Example
int x = 10;
int y = 9;
printf("%d", x > y);
In the example below, we use the equal to (==) operator to compare different values:

Example
printf("%d", 10 == 10); // Returns 1 (true), because 10 is equal to 10
printf("%d", 10 == 15); // Returns 0 (false), because 10 is not equal to 15
printf("%d", 5 == 55);  // Returns 0 (false) because 5 is not equal to 55
You are not limited to only compare numbers. You can also compare boolean variables, or even special structures, like arrays (which you will learn more about in a later chapter):

Example
bool isHamburgerTasty = true;
bool isPizzaTasty = true;

// Find out if both hamburger and pizza is tasty
printf("%d", isHamburgerTasty == isPizzaTasty);
Remember to include the <stdbool.h> header file when working with bool variables.

C Exercises
Test Yourself With Exercises
Exercise:
What is the result of the following example?

printf("%d", 15 > 5);












